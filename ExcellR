{"cells":[{"cell_type":"markdown","metadata":{"id":"8_V7FtLqWGl4"},"source":["letters = ['a', 'b', 'c']\n","letters = letters[1:]\n","print(letters)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"oicmEFrcrLRn"},"outputs":[],"source":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"nuRrYGKIrLU6"},"outputs":[],"source":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"SHerWlhbrLX-"},"outputs":[],"source":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"yrjyRfp_yeXD"},"outputs":[],"source":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"dSkKJAp45oIS"},"outputs":[],"source":[]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":400,"status":"ok","timestamp":1735883836861,"user":{"displayName":"Rhea Chase","userId":"07786553087483166353"},"user_tz":-330},"id":"8K9j5bPYvTsD","outputId":"fb0baa26-685e-4921-f1ed-23dddcaa96bb"},"outputs":[{"name":"stdout","output_type":"stream","text":["['b', 'c']\n"]}],"source":["letters = ['a', 'b', 'c']\n","letters = letters[1:]\n","print(letters)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":404,"status":"ok","timestamp":1735883958393,"user":{"displayName":"Rhea Chase","userId":"07786553087483166353"},"user_tz":-330},"id":"cuSF3hl8vTxY","outputId":"22ca5da2-e493-4430-c3f6-3c3b619e1cbd"},"outputs":[{"name":"stdout","output_type":"stream","text":["['c']\n"]}],"source":["def delete_head(t):\n","  del t[0]\n","  letters = ['a', 'b', 'c']\n","delete_head(letters)\n","print(letters)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":420,"status":"ok","timestamp":1735964068615,"user":{"displayName":"Rhea Chase","userId":"07786553087483166353"},"user_tz":-330},"id":"c_oEisdvgKAl","outputId":"372350c9-536a-4751-c4c3-ad10b6364cd6"},"outputs":[{"data":{"text/plain":["tuple"]},"execution_count":4,"metadata":{},"output_type":"execute_result"}],"source":["  t1 =('a',)\n","  type(t1)\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":751,"status":"ok","timestamp":1735964815235,"user":{"displayName":"Rhea Chase","userId":"07786553087483166353"},"user_tz":-330},"id":"xA_JXZpBhfsJ","outputId":"9b8b7f1b-ec77-43dd-d480-ae22dc36a41c"},"outputs":[{"name":"stdout","output_type":"stream","text":["('a', 'b', 'c')\n"]}],"source":["t1 = ('a', 'b', 'c')\n","print(t1)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":367,"status":"ok","timestamp":1735964961834,"user":{"displayName":"Rhea Chase","userId":"07786553087483166353"},"user_tz":-330},"id":"M676qqukj4-k","outputId":"5d0eb343-bab6-4166-d43e-0f0c9d9677a5"},"outputs":[{"name":"stdout","output_type":"stream","text":["{1: 'a', 2: 'b', 3: 'c'}\n"]}],"source":["r={1:'a', 2:'b', 3:'c'}\n","print (d)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"z0qoesob6DRv"},"outputs":[],"source":["my_int= 42\n","print(\"Original Integer: \", my_int)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"N_-bKjj56H9s"},"outputs":[],"source":["import random\n","responses = {\n","    \"hours\": \"Some sort fo bull crap.\",\n","    \"products\": \"Another kind of bc.\",\n","    \"location\": \"Some shitty location.\",\n","    \"help\": \"And why the fuck would i even do that? huh?\"\n","}\n","\n","def chatbot_response(user_input):\n","    user_input = user_input.lower()\n","    if \"hours\" in user_input:\n","        return responses[\"hours\"]\n","    elif \"products\" in user_input:\n","        return responses[\"products\"]\n","    elif \"location\" in user_input:\n","        return responses[\"location\"]\n","    elif \"help\" in user_input:\n","        return responses[\"help\"]\n","    else:\n","      return \"I'm sorry, I didn't understand that. Can you ask something else\""]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":430,"status":"ok","timestamp":1736232642849,"user":{"displayName":"Rhea Chase","userId":"07786553087483166353"},"user_tz":-330},"id":"ZCLwxbScgkyD","outputId":"7953c136-bf25-4fc8-eabe-ce2014ab849b"},"outputs":[{"name":"stdout","output_type":"stream","text":["hello world\n"]}],"source":["a = \"HELLO WORLD\"\n","B=a.lower()\n","print(B)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":439,"status":"ok","timestamp":1736232758381,"user":{"displayName":"Rhea Chase","userId":"07786553087483166353"},"user_tz":-330},"id":"iL96dDa-h88e","outputId":"a1f16986-8e60-4362-837e-e3165f070935"},"outputs":[{"name":"stdout","output_type":"stream","text":["HELLO Rhea\n"]}],"source":["a = \"HELLO WORLD\"\n","B=a.replace('WORLD', 'Rhea')\n","print(B)"]},{"cell_type":"markdown","metadata":{"id":"vpZAyMlDiYB_"},"source":[]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":4,"status":"ok","timestamp":1736232925226,"user":{"displayName":"Rhea Chase","userId":"07786553087483166353"},"user_tz":-330},"id":"Pd6kyLjviYyk","outputId":"a75b5956-9fb2-4644-bb6a-ed5230590a34"},"outputs":[{"name":"stdout","output_type":"stream","text":["wE ARE SUPOSSED TO WRITE SOME SORT OF SHIT IN THIS AREA. sO, HERE IT IS.\n"]}],"source":["text = \"We are supossed to write some sort of shit in this area. So, here it is.\"\n","\n","swapped_text = text.swapcase()\n","\n","print(swapped_text)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"Z-fcDqbgiaRX","outputId":"c4db8334-8fcc-43d5-82f8-dcb5bdab3d45"},"outputs":[{"name":"stdout","output_type":"stream","text":["range(0, 13)\n","[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n"]}],"source":["r = range(13)\n","print(r)\n","\n","list = list(r)\n","print(list)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":8919,"status":"ok","timestamp":1736315698414,"user":{"displayName":"Rhea Chase","userId":"07786553087483166353"},"user_tz":-330},"id":"vmAOSnI6iawq","outputId":"2aa80ff4-7079-490c-cce0-13808e0e8689"},"outputs":[{"name":"stdout","output_type":"stream","text":["Requirement already satisfied: spacy in /usr/local/lib/python3.10/dist-packages (3.7.5)\n","Requirement already satisfied: spacy-legacy<3.1.0,>=3.0.11 in /usr/local/lib/python3.10/dist-packages (from spacy) (3.0.12)\n","Requirement already satisfied: spacy-loggers<2.0.0,>=1.0.0 in /usr/local/lib/python3.10/dist-packages (from spacy) (1.0.5)\n","Requirement already satisfied: murmurhash<1.1.0,>=0.28.0 in /usr/local/lib/python3.10/dist-packages (from spacy) (1.0.11)\n","Requirement already satisfied: cymem<2.1.0,>=2.0.2 in /usr/local/lib/python3.10/dist-packages (from spacy) (2.0.10)\n","Requirement already satisfied: preshed<3.1.0,>=3.0.2 in /usr/local/lib/python3.10/dist-packages (from spacy) (3.0.9)\n","Requirement already satisfied: thinc<8.3.0,>=8.2.2 in /usr/local/lib/python3.10/dist-packages (from spacy) (8.2.5)\n","Requirement already satisfied: wasabi<1.2.0,>=0.9.1 in /usr/local/lib/python3.10/dist-packages (from spacy) (1.1.3)\n","Requirement already satisfied: srsly<3.0.0,>=2.4.3 in /usr/local/lib/python3.10/dist-packages (from spacy) (2.5.0)\n","Requirement already satisfied: catalogue<2.1.0,>=2.0.6 in /usr/local/lib/python3.10/dist-packages (from spacy) (2.0.10)\n","Requirement already satisfied: weasel<0.5.0,>=0.1.0 in /usr/local/lib/python3.10/dist-packages (from spacy) (0.4.1)\n","Requirement already satisfied: typer<1.0.0,>=0.3.0 in /usr/local/lib/python3.10/dist-packages (from spacy) (0.15.1)\n","Requirement already satisfied: tqdm<5.0.0,>=4.38.0 in /usr/local/lib/python3.10/dist-packages (from spacy) (4.67.1)\n","Requirement already satisfied: requests<3.0.0,>=2.13.0 in /usr/local/lib/python3.10/dist-packages (from spacy) (2.32.3)\n","Requirement already satisfied: pydantic!=1.8,!=1.8.1,<3.0.0,>=1.7.4 in /usr/local/lib/python3.10/dist-packages (from spacy) (2.10.3)\n","Requirement already satisfied: jinja2 in /usr/local/lib/python3.10/dist-packages (from spacy) (3.1.4)\n","Requirement already satisfied: setuptools in /usr/local/lib/python3.10/dist-packages (from spacy) (75.1.0)\n","Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.10/dist-packages (from spacy) (24.2)\n","Requirement already satisfied: langcodes<4.0.0,>=3.2.0 in /usr/local/lib/python3.10/dist-packages (from spacy) (3.5.0)\n","Requirement already satisfied: numpy>=1.19.0 in /usr/local/lib/python3.10/dist-packages (from spacy) (1.26.4)\n","Requirement already satisfied: language-data>=1.2 in /usr/local/lib/python3.10/dist-packages (from langcodes<4.0.0,>=3.2.0->spacy) (1.3.0)\n","Requirement already satisfied: annotated-types>=0.6.0 in /usr/local/lib/python3.10/dist-packages (from pydantic!=1.8,!=1.8.1,<3.0.0,>=1.7.4->spacy) (0.7.0)\n","Requirement already satisfied: pydantic-core==2.27.1 in /usr/local/lib/python3.10/dist-packages (from pydantic!=1.8,!=1.8.1,<3.0.0,>=1.7.4->spacy) (2.27.1)\n","Requirement already satisfied: typing-extensions>=4.12.2 in /usr/local/lib/python3.10/dist-packages (from pydantic!=1.8,!=1.8.1,<3.0.0,>=1.7.4->spacy) (4.12.2)\n","Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.10/dist-packages (from requests<3.0.0,>=2.13.0->spacy) (3.4.0)\n","Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.10/dist-packages (from requests<3.0.0,>=2.13.0->spacy) (3.10)\n","Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.10/dist-packages (from requests<3.0.0,>=2.13.0->spacy) (2.2.3)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.10/dist-packages (from requests<3.0.0,>=2.13.0->spacy) (2024.12.14)\n","Requirement already satisfied: blis<0.8.0,>=0.7.8 in /usr/local/lib/python3.10/dist-packages (from thinc<8.3.0,>=8.2.2->spacy) (0.7.11)\n","Requirement already satisfied: confection<1.0.0,>=0.0.1 in /usr/local/lib/python3.10/dist-packages (from thinc<8.3.0,>=8.2.2->spacy) (0.1.5)\n","Requirement already satisfied: click>=8.0.0 in /usr/local/lib/python3.10/dist-packages (from typer<1.0.0,>=0.3.0->spacy) (8.1.7)\n","Requirement already satisfied: shellingham>=1.3.0 in /usr/local/lib/python3.10/dist-packages (from typer<1.0.0,>=0.3.0->spacy) (1.5.4)\n","Requirement already satisfied: rich>=10.11.0 in /usr/local/lib/python3.10/dist-packages (from typer<1.0.0,>=0.3.0->spacy) (13.9.4)\n","Requirement already satisfied: cloudpathlib<1.0.0,>=0.7.0 in /usr/local/lib/python3.10/dist-packages (from weasel<0.5.0,>=0.1.0->spacy) (0.20.0)\n","Requirement already satisfied: smart-open<8.0.0,>=5.2.1 in /usr/local/lib/python3.10/dist-packages (from weasel<0.5.0,>=0.1.0->spacy) (7.1.0)\n","Requirement already satisfied: MarkupSafe>=2.0 in /usr/local/lib/python3.10/dist-packages (from jinja2->spacy) (3.0.2)\n","Requirement already satisfied: marisa-trie>=1.1.0 in /usr/local/lib/python3.10/dist-packages (from language-data>=1.2->langcodes<4.0.0,>=3.2.0->spacy) (1.2.1)\n","Requirement already satisfied: markdown-it-py>=2.2.0 in /usr/local/lib/python3.10/dist-packages (from rich>=10.11.0->typer<1.0.0,>=0.3.0->spacy) (3.0.0)\n","Requirement already satisfied: pygments<3.0.0,>=2.13.0 in /usr/local/lib/python3.10/dist-packages (from rich>=10.11.0->typer<1.0.0,>=0.3.0->spacy) (2.18.0)\n","Requirement already satisfied: wrapt in /usr/local/lib/python3.10/dist-packages (from smart-open<8.0.0,>=5.2.1->weasel<0.5.0,>=0.1.0->spacy) (1.17.0)\n","Requirement already satisfied: mdurl~=0.1 in /usr/local/lib/python3.10/dist-packages (from markdown-it-py>=2.2.0->rich>=10.11.0->typer<1.0.0,>=0.3.0->spacy) (0.1.2)\n"]}],"source":["!pip install spacy\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"OekgMneZeqdk"},"outputs":[],"source":["import spacy"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"1vymW27BeyEh"},"outputs":[],"source":["nlp = spacy.load(\"en_core_web_sm\")"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":371,"status":"ok","timestamp":1736316023962,"user":{"displayName":"Rhea Chase","userId":"07786553087483166353"},"user_tz":-330},"id":"O6XQxIwFe5dS","outputId":"c19d20c3-cf84-429f-9e1a-cd929edeb1fb"},"outputs":[{"data":{"text/plain":["str"]},"execution_count":5,"metadata":{},"output_type":"execute_result"}],"source":["text = (\"There were two things that were important to Tracey. The first was her dog. Anyone that had ever met Tracey knew how much she loved her dog. Most would say that she treated it as her child. The dog went everywhere with her and it had been her best friend for the past five years. The second thing that was important to Tracey, however, would be a lot more surprising to most people.\")\n","type(text)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"pcNs_Ni6e9nz"},"outputs":[],"source":["sentence = nlp(text)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":396,"status":"ok","timestamp":1736316073367,"user":{"displayName":"Rhea Chase","userId":"07786553087483166353"},"user_tz":-330},"id":"EKYouyOxe-oM","outputId":"e3dce435-37e8-4be7-c392-5142d6bccb4d"},"outputs":[{"data":{"text/plain":["spacy.tokens.doc.Doc"]},"execution_count":7,"metadata":{},"output_type":"execute_result"}],"source":["type(sentence)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"dhs8Mj6xkPky"},"outputs":[],"source":["text.lower()\n","text.split(\" \")"]},{"cell_type":"markdown","metadata":{"id":"06yVECnfe_qV"},"source":["[link text](https://)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":4597,"status":"ok","timestamp":1736317184190,"user":{"displayName":"Rhea Chase","userId":"07786553087483166353"},"user_tz":-330},"id":"RvCtEp_DkKkO","outputId":"2d4127ad-627e-4730-e77f-dfc4901a1bd6"},"outputs":[{"name":"stderr","output_type":"stream","text":["[nltk_data] Downloading package stopwords to /root/nltk_data...\n","[nltk_data]   Unzipping corpora/stopwords.zip.\n"]},{"data":{"text/plain":["['T',\n"," 'h',\n"," 'e',\n"," 'r',\n"," 'e',\n"," ' ',\n"," 'w',\n"," 'e',\n"," 'r',\n"," 'e',\n"," ' ',\n"," 'w',\n"," ' ',\n"," 'h',\n"," 'n',\n"," 'g',\n"," ' ',\n"," 'h',\n"," ' ',\n"," 'w',\n"," 'e',\n"," 'r',\n"," 'e',\n"," ' ',\n"," 'p',\n"," 'r',\n"," 'n',\n"," ' ',\n"," ' ',\n"," 'T',\n"," 'r',\n"," 'c',\n"," 'e',\n"," '.',\n"," ' ',\n"," 'T',\n"," 'h',\n"," 'e',\n"," ' ',\n"," 'f',\n"," 'r',\n"," ' ',\n"," 'w',\n"," ' ',\n"," 'h',\n"," 'e',\n"," 'r',\n"," ' ',\n"," 'g',\n"," '.',\n"," ' ',\n"," 'A',\n"," 'n',\n"," 'n',\n"," 'e',\n"," ' ',\n"," 'h',\n"," ' ',\n"," 'h',\n"," ' ',\n"," 'e',\n"," 'v',\n"," 'e',\n"," 'r',\n"," ' ',\n"," 'e',\n"," ' ',\n"," 'T',\n"," 'r',\n"," 'c',\n"," 'e',\n"," ' ',\n"," 'k',\n"," 'n',\n"," 'e',\n"," 'w',\n"," ' ',\n"," 'h',\n"," 'w',\n"," ' ',\n"," 'u',\n"," 'c',\n"," 'h',\n"," ' ',\n"," 'h',\n"," 'e',\n"," ' ',\n"," 'l',\n"," 'v',\n"," 'e',\n"," ' ',\n"," 'h',\n"," 'e',\n"," 'r',\n"," ' ',\n"," 'g',\n"," '.',\n"," ' ',\n"," 'M',\n"," ' ',\n"," 'w',\n"," 'u',\n"," 'l',\n"," ' ',\n"," ' ',\n"," 'h',\n"," ' ',\n"," 'h',\n"," 'e',\n"," ' ',\n"," 'r',\n"," 'e',\n"," 'e',\n"," ' ',\n"," ' ',\n"," ' ',\n"," 'h',\n"," 'e',\n"," 'r',\n"," ' ',\n"," 'c',\n"," 'h',\n"," 'l',\n"," '.',\n"," ' ',\n"," 'T',\n"," 'h',\n"," 'e',\n"," ' ',\n"," 'g',\n"," ' ',\n"," 'w',\n"," 'e',\n"," 'n',\n"," ' ',\n"," 'e',\n"," 'v',\n"," 'e',\n"," 'r',\n"," 'w',\n"," 'h',\n"," 'e',\n"," 'r',\n"," 'e',\n"," ' ',\n"," 'w',\n"," 'h',\n"," ' ',\n"," 'h',\n"," 'e',\n"," 'r',\n"," ' ',\n"," 'n',\n"," ' ',\n"," ' ',\n"," 'h',\n"," ' ',\n"," 'b',\n"," 'e',\n"," 'e',\n"," 'n',\n"," ' ',\n"," 'h',\n"," 'e',\n"," 'r',\n"," ' ',\n"," 'b',\n"," 'e',\n"," ' ',\n"," 'f',\n"," 'r',\n"," 'e',\n"," 'n',\n"," ' ',\n"," 'f',\n"," 'r',\n"," ' ',\n"," 'h',\n"," 'e',\n"," ' ',\n"," 'p',\n"," ' ',\n"," 'f',\n"," 'v',\n"," 'e',\n"," ' ',\n"," 'e',\n"," 'r',\n"," '.',\n"," ' ',\n"," 'T',\n"," 'h',\n"," 'e',\n"," ' ',\n"," 'e',\n"," 'c',\n"," 'n',\n"," ' ',\n"," 'h',\n"," 'n',\n"," 'g',\n"," ' ',\n"," 'h',\n"," ' ',\n"," 'w',\n"," ' ',\n"," 'p',\n"," 'r',\n"," 'n',\n"," ' ',\n"," ' ',\n"," 'T',\n"," 'r',\n"," 'c',\n"," 'e',\n"," ',',\n"," ' ',\n"," 'h',\n"," 'w',\n"," 'e',\n"," 'v',\n"," 'e',\n"," 'r',\n"," ',',\n"," ' ',\n"," 'w',\n"," 'u',\n"," 'l',\n"," ' ',\n"," 'b',\n"," 'e',\n"," ' ',\n"," ' ',\n"," 'l',\n"," ' ',\n"," 'r',\n"," 'e',\n"," ' ',\n"," 'u',\n"," 'r',\n"," 'p',\n"," 'r',\n"," 'n',\n"," 'g',\n"," ' ',\n"," ' ',\n"," ' ',\n"," 'p',\n"," 'e',\n"," 'p',\n"," 'l',\n"," 'e',\n"," '.']"]},"execution_count":12,"metadata":{},"output_type":"execute_result"}],"source":["from nltk.corpus import stopwords\n","import nltk\n","\n","nltk.download('stopwords')\n","\n","stop_words = set(stopwords.words('english'))\n","text_without_stopwords = [word for word in text if word not in stop_words]\n","text_without_stopwords\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":193},"executionInfo":{"elapsed":361,"status":"error","timestamp":1736316989889,"user":{"displayName":"Rhea Chase","userId":"07786553087483166353"},"user_tz":-330},"id":"HOuhYYOOfAIj","outputId":"2d399ca1-95e1-48b6-d1a9-0eaa2a1b6116"},"outputs":[{"ename":"NameError","evalue":"name 'stop_words' is not defined","output_type":"error","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-10-c895a3ac809d>\u001b[0m in \u001b[0;36m<cell line: 1>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mtext_without_stopwords\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mtext\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mword\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mword\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mtext\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0mword\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mstop_words\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m<ipython-input-10-c895a3ac809d>\u001b[0m in \u001b[0;36m<listcomp>\u001b[0;34m(.0)\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mtext_without_stopwords\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mtext\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mword\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mword\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mtext\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0mword\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mstop_words\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;31mNameError\u001b[0m: name 'stop_words' is not defined"]}],"source":["text_without_stopwords = [text.append(word) for word in text if word not in stop_words]"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":141},"executionInfo":{"elapsed":440,"status":"error","timestamp":1736317005824,"user":{"displayName":"Rhea Chase","userId":"07786553087483166353"},"user_tz":-330},"id":"OGlH9dwXjrzz","outputId":"30b735f8-20ee-4d38-eda8-ca7991b3a1ee"},"outputs":[{"ename":"NameError","evalue":"name 'text_without_stopwords' is not defined","output_type":"error","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-11-198199288017>\u001b[0m in \u001b[0;36m<cell line: 1>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mtext_without_stopwords\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;31mNameError\u001b[0m: name 'text_without_stopwords' is not defined"]}],"source":["text_without_stopwords"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":19333,"status":"ok","timestamp":1736405038608,"user":{"displayName":"Rhea Chase","userId":"07786553087483166353"},"user_tz":-330},"id":"bGiLi2TwygoE","outputId":"ed75e378-3378-494e-d895-fe0f0d2ca00d"},"outputs":[{"name":"stdout","output_type":"stream","text":["Collecting SpeechRecognition\n","  Downloading SpeechRecognition-3.13.0-py3-none-any.whl.metadata (30 kB)\n","Collecting pyttsx3\n","  Downloading pyttsx3-2.98-py3-none-any.whl.metadata (3.8 kB)\n","Collecting pyaudio\n","  Downloading PyAudio-0.2.14.tar.gz (47 kB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m47.1/47.1 kB\u001b[0m \u001b[31m1.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25h  Installing build dependencies ... \u001b[?25l\u001b[?25hdone\n","  Getting requirements to build wheel ... \u001b[?25l\u001b[?25hdone\n","  Preparing metadata (pyproject.toml) ... \u001b[?25l\u001b[?25hdone\n","Requirement already satisfied: typing-extensions in /usr/local/lib/python3.10/dist-packages (from SpeechRecognition) (4.12.2)\n","Downloading SpeechRecognition-3.13.0-py3-none-any.whl (32.8 MB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m32.8/32.8 MB\u001b[0m \u001b[31m46.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading pyttsx3-2.98-py3-none-any.whl (34 kB)\n","Building wheels for collected packages: pyaudio\n","  \u001b[1;31merror\u001b[0m: \u001b[1msubprocess-exited-with-error\u001b[0m\n","  \n","  \u001b[31m×\u001b[0m \u001b[32mBuilding wheel for pyaudio \u001b[0m\u001b[1;32m(\u001b[0m\u001b[32mpyproject.toml\u001b[0m\u001b[1;32m)\u001b[0m did not run successfully.\n","  \u001b[31m│\u001b[0m exit code: \u001b[1;36m1\u001b[0m\n","  \u001b[31m╰─>\u001b[0m See above for output.\n","  \n","  \u001b[1;35mnote\u001b[0m: This error originates from a subprocess, and is likely not a problem with pip.\n","  Building wheel for pyaudio (pyproject.toml) ... \u001b[?25l\u001b[?25herror\n","\u001b[31m  ERROR: Failed building wheel for pyaudio\u001b[0m\u001b[31m\n","\u001b[0mFailed to build pyaudio\n","\u001b[31mERROR: ERROR: Failed to build installable wheels for some pyproject.toml based projects (pyaudio)\u001b[0m\u001b[31m\n","\u001b[0m"]}],"source":["pip install  SpeechRecognition pyttsx3 pyaudio"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":383},"executionInfo":{"elapsed":1206,"status":"error","timestamp":1736405937151,"user":{"displayName":"Rhea Chase","userId":"07786553087483166353"},"user_tz":-330},"id":"LK4B9TN0yg7H","outputId":"22154367-a3ec-43c2-cffd-8145c850e5a7"},"outputs":[{"ename":"ModuleNotFoundError","evalue":"No module named 'pyttsx3'","output_type":"error","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mModuleNotFoundError\u001b[0m                       Traceback (most recent call last)","\u001b[0;32m<ipython-input-2-74ea982df3d5>\u001b[0m in \u001b[0;36m<cell line: 1>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0;32mimport\u001b[0m \u001b[0mpyttsx3\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0mengine\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpyttsx3\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0minit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0mspeak\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtext\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m     \u001b[0mengine\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msay\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtext\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mModuleNotFoundError\u001b[0m: No module named 'pyttsx3'","","\u001b[0;31m---------------------------------------------------------------------------\u001b[0;32m\nNOTE: If your import is failing due to a missing package, you can\nmanually install dependencies using either !pip or !apt.\n\nTo view examples of installing some common dependencies, click the\n\"Open Examples\" button below.\n\u001b[0;31m---------------------------------------------------------------------------\u001b[0m\n"]}],"source":["import pyttsx3\n","engine = pyttsx3.init()\n","\n","def speak(text):\n","    engine.say(text)\n","    engine.runAndWait()\n","\n","def main():\n","    speak(\"Hello! I am your simple bot.\")\n","    speak(\"YOu can say hello.\")\n","\n","    while True:\n","        command = input(\"You: \").lower()\n","\n","        if \"hello\" in command:\n","            speak(\"Hi there!.\")\n","        elif \"What's your name?\" in command or \"what is your name?\" in command:\n","            speak(\" Your wish is my command misstress\")\n","        elif \"goodbye\" in command:\n","            speak(\" I shall take my leave now. misstress \")\n","            break\n","        else:\n","            speak(\"I do not understand mistress. Would you be kind and repeat that again for me\")\n","\n","if __name__ == \"__main__\":\n","    main()\n","\n","\n","\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":795},"executionInfo":{"elapsed":5916,"status":"ok","timestamp":1736408370505,"user":{"displayName":"Rhea Chase","userId":"07786553087483166353"},"user_tz":-330},"id":"94rvOwkayhCO","outputId":"2a2d0cc0-76c6-4c28-e281-d36de96edfbf"},"outputs":[{"name":"stdout","output_type":"stream","text":["   Age   Salary  Purchased\n","0   13   400000          0\n","1   24   334556          1\n","2   46   234467          0\n","3   43  2588764          1\n","4   95  2844890          0\n","5   50     9000          1\n","6   57   937399          1\n","7   78   556478          0\n","   Age   Salary  Purchased\n","0   13   400000          0\n","1   24   334556          1\n","2   46   234467          0\n","3   43  2588764          1\n","4   95  2844890          0\n"]},{"data":{"image/png":"\n","text/plain":["<Figure size 500x400 with 1 Axes>"]},"metadata":{},"output_type":"display_data"},{"name":"stdout","output_type":"stream","text":["Prediction for Age 29: Will not purchase\n","Probability: 0.40177520419201784\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.10/dist-packages/sklearn/utils/validation.py:2739: UserWarning: X does not have valid feature names, but LogisticRegression was fitted with feature names\n","  warnings.warn(\n","/usr/local/lib/python3.10/dist-packages/sklearn/utils/validation.py:2739: UserWarning: X does not have valid feature names, but LogisticRegression was fitted with feature names\n","  warnings.warn(\n"]}],"source":["import pandas as pd\n","import matplotlib.pyplot as plt\n","from sklearn.linear_model import LogisticRegression\n","from sklearn.model_selection import train_test_split\n","\n","# Create the dataset\n","data = \"\"\"Age,Salary,Purchased\n","13,400000,0\n","24,334556,1\n","46,234467,0\n","43,2588764,1\n","95,2844890,0\n","50,9000,1\n","57,937399,1\n","78,556478,0\"\"\"\n","\n","from io import StringIO\n","df = pd.read_csv(StringIO(data))\n","\n","# Display the dataset\n","print(df.head(15))\n","print(df.head())\n","\n","# Scatter plot\n","plt.figure(figsize=(5, 4))\n","plt.scatter(df['Age'], df['Purchased'], c=df['Purchased'], cmap='bwr')\n","plt.xlabel('Age')\n","plt.ylabel('Purchased (0 = No, 1 = Yes)')\n","plt.title('Some Project')\n","plt.legend(['No purchase', 'Purchase'])\n","plt.grid(True)\n","plt.show()\n","\n","x = df[['Age']]\n","y = df['Purchased']\n","\n","x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=42)\n","\n","model = LogisticRegression()\n","model.fit(x_train, y_train)\n","\n","new_age = [[29]]\n","prediction = model.predict(new_age)\n","probability = model.predict_proba(new_age)[0][1]\n","\n","print(f\"Prediction for Age {new_age[0][0]}: {'Will purchase' if prediction[0] == 1 else 'Will not purchase'}\")\n","print(f\"Probability: {probability}\")\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":5679,"status":"ok","timestamp":1738652022929,"user":{"displayName":"Rhea Chase","userId":"07786553087483166353"},"user_tz":-330},"id":"4R0Sej0JyhIq","outputId":"91da45be-a103-45a7-d9e3-03a7a3fec760"},"outputs":[{"name":"stdout","output_type":"stream","text":["SJJNDV\n"]}],"source":["x = input()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"xf68kmMgyhNq"},"outputs":[],"source":["def lowercase(sentence):\n","  return sentence.lower()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"VOdN33sRyhRd"},"outputs":[],"source":["def uppercase(sentence):\n","  return sentence.upper()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true,"base_uri":"https://localhost:8080/"},"id":"fEK4XhtwyhU-","outputId":"c0cd33bc-021d-4368-b3cc-abce7b3e5430"},"outputs":[{"name":"stdout","output_type":"stream","text":["DONKEY\n","4\n","font\n"]}],"source":["x = input(\"Enter text: \")\n","end_words = ['stop', 'exit', 'esc']\n","\n","while x not in end_words:\n","    choice = input(\"Enter 1 (lowercase), 2 (uppercase), or 3 (swap case): \")\n","\n","    if choice == '1':\n","        print(x.lower())\n","    elif choice == '2':\n","        print(x.upper())\n","    elif choice == '3':\n","        print(x.swapcase())\n","    else:\n","        print(\"Invalid choice\")\n","\n","    x = input(\"Enter text: \")\n"]},{"cell_type":"markdown","source":["8.2.25"],"metadata":{"id":"2uiSuqsKxodD"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"Y74l_x8JyhYX","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1738988275242,"user_tz":-330,"elapsed":23,"user":{"displayName":"Rhea Chase","userId":"07786553087483166353"}},"outputId":"c4f61e3f-4b2e-4468-930c-69400691c923"},"outputs":[{"output_type":"stream","name":"stdout","text":["what the actual hell?!\n"]}],"source":["print(\"what the actual hell?!\")"]},{"cell_type":"code","source":["print(\"Now were supposed to know how \\n is supposed to work\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"DZjcYoFUxyZN","executionInfo":{"status":"ok","timestamp":1738988314930,"user_tz":-330,"elapsed":60,"user":{"displayName":"Rhea Chase","userId":"07786553087483166353"}},"outputId":"2204f208-e1b8-4e70-ebdd-3fc1b6281fa6"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Now were supposed to know how \n"," is supposed to work\n"]}]},{"cell_type":"code","execution_count":null,"metadata":{"id":"NOYP8pM6yhbb","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1738988792891,"user_tz":-330,"elapsed":50,"user":{"displayName":"Rhea Chase","userId":"07786553087483166353"}},"outputId":"5e3cf6f5-27b1-4c1c-e3b0-3db57483535b"},"outputs":[{"output_type":"stream","name":"stdout","text":["This is the way to \tto college\n"]}],"source":["print(\"This is the way to \\tto college\")"]},{"cell_type":"code","source":["import re\n","pattern=r'\\d+'\n","string=\"James fuckin Bond is 007!!\"\n","matching=re.search(pattern,string)\n","matching.group()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":36},"id":"6bk8VZNXzrV0","executionInfo":{"status":"ok","timestamp":1738989988108,"user_tz":-330,"elapsed":34,"user":{"displayName":"Rhea Chase","userId":"07786553087483166353"}},"outputId":"321a2205-eef3-40eb-e58b-803c8f386961"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["'007'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":7}]},{"cell_type":"markdown","source":["10.02.25"],"metadata":{"id":"qvhT_BiFEMNs"}},{"cell_type":"code","source":["import tensorflow_hub as hub\n","import tensorflow_text as text"],"metadata":{"id":"6QVLa4vtzr7R","executionInfo":{"status":"ok","timestamp":1739161024418,"user_tz":-330,"elapsed":29419,"user":{"displayName":"Rhea Chase","userId":"07786553087483166353"}}},"execution_count":1,"outputs":[]},{"cell_type":"code","source":["preprocess_url = \"https://tfhub.dev/tensorflow/bert_en_uncased_preprocess/3\"\n","encoder_url = \"https://tfhub.dev/tensorflow/bert_en_uncased_L-12_H-768_A-12/4\""],"metadata":{"id":"X7jvmZqzEo9l","executionInfo":{"status":"ok","timestamp":1739161292061,"user_tz":-330,"elapsed":75,"user":{"displayName":"Rhea Chase","userId":"07786553087483166353"}}},"execution_count":2,"outputs":[]},{"cell_type":"code","source":["bert_preprocess_model = hub.KerasLayer(preprocess_url)\n"],"metadata":{"id":"W6dyyL-EF0tP","executionInfo":{"status":"ok","timestamp":1739161901599,"user_tz":-330,"elapsed":6021,"user":{"displayName":"Rhea Chase","userId":"07786553087483166353"}}},"execution_count":3,"outputs":[]},{"cell_type":"code","source":["text_test = ['Malla Reddy founded the college Malla Reddy', 'nice College indeed','I love python programming']\n","text_preprocessed = bert_preprocess_model(text_test)\n","text_preprocessed.keys()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"exqy7F1dIIE1","executionInfo":{"status":"ok","timestamp":1739161993813,"user_tz":-330,"elapsed":356,"user":{"displayName":"Rhea Chase","userId":"07786553087483166353"}},"outputId":"796af5f7-efaa-461a-a081-1497d793651d"},"execution_count":4,"outputs":[{"output_type":"execute_result","data":{"text/plain":["dict_keys(['input_type_ids', 'input_mask', 'input_word_ids'])"]},"metadata":{},"execution_count":4}]},{"cell_type":"code","source":["text_preprocessed['input_mask']\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"44vjvpHlIi_1","executionInfo":{"status":"ok","timestamp":1739162098365,"user_tz":-330,"elapsed":294,"user":{"displayName":"Rhea Chase","userId":"07786553087483166353"}},"outputId":"d4dbb36d-1657-4ebb-debe-6e5a38191584"},"execution_count":5,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<tf.Tensor: shape=(3, 128), dtype=int32, numpy=\n","array([[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n","        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n","        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n","        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n","        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n","        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n","       [1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n","        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n","        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n","        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n","        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n","        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n","       [1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n","        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n","        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n","        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n","        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n","        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],\n","      dtype=int32)>"]},"metadata":{},"execution_count":5}]},{"cell_type":"code","source":["text_preprocessed['input_type_ids']\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"x98uVae-Ii4z","executionInfo":{"status":"ok","timestamp":1739162116259,"user_tz":-330,"elapsed":205,"user":{"displayName":"Rhea Chase","userId":"07786553087483166353"}},"outputId":"88f5bc38-27e9-44a3-a7ca-3bbd9797f896"},"execution_count":6,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<tf.Tensor: shape=(3, 128), dtype=int32, numpy=\n","array([[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n","        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n","        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n","        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n","        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n","        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n","       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n","        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n","        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n","        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n","        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n","        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n","       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n","        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n","        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n","        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n","        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n","        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],\n","      dtype=int32)>"]},"metadata":{},"execution_count":6}]},{"cell_type":"code","source":["text_preprocessed['input_word_ids']\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"e4YEYfRKIivH","executionInfo":{"status":"ok","timestamp":1739162129125,"user_tz":-330,"elapsed":79,"user":{"displayName":"Rhea Chase","userId":"07786553087483166353"}},"outputId":"451debcb-51fa-41aa-f6c6-7d331736f6fd"},"execution_count":7,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<tf.Tensor: shape=(3, 128), dtype=int32, numpy=\n","array([[  101,  6670,  2050, 18998,  2631,  1996,  2267,  6670,  2050,\n","        18998,   102,     0,     0,     0,     0,     0,     0,     0,\n","            0,     0,     0,     0,     0,     0,     0,     0,     0,\n","            0,     0,     0,     0,     0,     0,     0,     0,     0,\n","            0,     0,     0,     0,     0,     0,     0,     0,     0,\n","            0,     0,     0,     0,     0,     0,     0,     0,     0,\n","            0,     0,     0,     0,     0,     0,     0,     0,     0,\n","            0,     0,     0,     0,     0,     0,     0,     0,     0,\n","            0,     0,     0,     0,     0,     0,     0,     0,     0,\n","            0,     0,     0,     0,     0,     0,     0,     0,     0,\n","            0,     0,     0,     0,     0,     0,     0,     0,     0,\n","            0,     0,     0,     0,     0,     0,     0,     0,     0,\n","            0,     0,     0,     0,     0,     0,     0,     0,     0,\n","            0,     0,     0,     0,     0,     0,     0,     0,     0,\n","            0,     0],\n","       [  101,  3835,  2267,  5262,   102,     0,     0,     0,     0,\n","            0,     0,     0,     0,     0,     0,     0,     0,     0,\n","            0,     0,     0,     0,     0,     0,     0,     0,     0,\n","            0,     0,     0,     0,     0,     0,     0,     0,     0,\n","            0,     0,     0,     0,     0,     0,     0,     0,     0,\n","            0,     0,     0,     0,     0,     0,     0,     0,     0,\n","            0,     0,     0,     0,     0,     0,     0,     0,     0,\n","            0,     0,     0,     0,     0,     0,     0,     0,     0,\n","            0,     0,     0,     0,     0,     0,     0,     0,     0,\n","            0,     0,     0,     0,     0,     0,     0,     0,     0,\n","            0,     0,     0,     0,     0,     0,     0,     0,     0,\n","            0,     0,     0,     0,     0,     0,     0,     0,     0,\n","            0,     0,     0,     0,     0,     0,     0,     0,     0,\n","            0,     0,     0,     0,     0,     0,     0,     0,     0,\n","            0,     0],\n","       [  101,  1045,  2293, 18750,  4730,   102,     0,     0,     0,\n","            0,     0,     0,     0,     0,     0,     0,     0,     0,\n","            0,     0,     0,     0,     0,     0,     0,     0,     0,\n","            0,     0,     0,     0,     0,     0,     0,     0,     0,\n","            0,     0,     0,     0,     0,     0,     0,     0,     0,\n","            0,     0,     0,     0,     0,     0,     0,     0,     0,\n","            0,     0,     0,     0,     0,     0,     0,     0,     0,\n","            0,     0,     0,     0,     0,     0,     0,     0,     0,\n","            0,     0,     0,     0,     0,     0,     0,     0,     0,\n","            0,     0,     0,     0,     0,     0,     0,     0,     0,\n","            0,     0,     0,     0,     0,     0,     0,     0,     0,\n","            0,     0,     0,     0,     0,     0,     0,     0,     0,\n","            0,     0,     0,     0,     0,     0,     0,     0,     0,\n","            0,     0,     0,     0,     0,     0,     0,     0,     0,\n","            0,     0]], dtype=int32)>"]},"metadata":{},"execution_count":7}]},{"cell_type":"code","source":["bert_model = hub.KerasLayer(encoder_url)\n"],"metadata":{"id":"ZuR-CgiEIild","executionInfo":{"status":"ok","timestamp":1739162168814,"user_tz":-330,"elapsed":27291,"user":{"displayName":"Rhea Chase","userId":"07786553087483166353"}}},"execution_count":8,"outputs":[]},{"cell_type":"code","source":["bert_results = bert_model(text_preprocessed)\n"],"metadata":{"id":"Xln52svjIibi","executionInfo":{"status":"ok","timestamp":1739162175018,"user_tz":-330,"elapsed":2642,"user":{"displayName":"Rhea Chase","userId":"07786553087483166353"}}},"execution_count":9,"outputs":[]},{"cell_type":"code","source":["bert_results.keys()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"CJpxStA3IiLq","executionInfo":{"status":"ok","timestamp":1739162182235,"user_tz":-330,"elapsed":15,"user":{"displayName":"Rhea Chase","userId":"07786553087483166353"}},"outputId":"ca661638-e4ea-4ad9-8919-971e17ebc70d"},"execution_count":10,"outputs":[{"output_type":"execute_result","data":{"text/plain":["dict_keys(['pooled_output', 'sequence_output', 'encoder_outputs', 'default'])"]},"metadata":{},"execution_count":10}]},{"cell_type":"code","source":["bert_results['pooled_output']\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"_l_uT5n5Ih4P","executionInfo":{"status":"ok","timestamp":1739162185547,"user_tz":-330,"elapsed":13,"user":{"displayName":"Rhea Chase","userId":"07786553087483166353"}},"outputId":"54b6b8ee-cd6b-48b1-da06-0def9008289d"},"execution_count":11,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<tf.Tensor: shape=(3, 768), dtype=float32, numpy=\n","array([[-0.91015345, -0.5552098 , -0.89523005, ..., -0.7792492 ,\n","        -0.7432935 ,  0.844061  ],\n","       [-0.70691174, -0.19649167,  0.358085  , ...,  0.11075677,\n","        -0.49426004,  0.7511823 ],\n","       [-0.91712326, -0.47935176, -0.7865697 , ..., -0.6175174 ,\n","        -0.7102685 ,  0.921843  ]], dtype=float32)>"]},"metadata":{},"execution_count":11}]},{"cell_type":"code","source":["bert_results['encoder_outputs']"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"d7x83ufIJLOo","executionInfo":{"status":"ok","timestamp":1739162189497,"user_tz":-330,"elapsed":302,"user":{"displayName":"Rhea Chase","userId":"07786553087483166353"}},"outputId":"99f57599-c400-45b4-e586-9083aa188298"},"execution_count":12,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[<tf.Tensor: shape=(3, 128, 768), dtype=float32, numpy=\n"," array([[[ 0.1913375 ,  0.06428984, -0.07848611, ...,  0.097857  ,\n","           0.15010074,  0.08774048],\n","         [-0.01523429, -0.6737131 ,  0.08400011, ...,  0.74796474,\n","           0.50102866, -1.6123186 ],\n","         [-0.2560761 ,  0.41177437, -0.8849589 , ...,  0.65224457,\n","           0.62389064, -0.06812306],\n","         ...,\n","         [ 0.20439729, -0.19339158,  0.6761639 , ...,  0.4290581 ,\n","          -0.05558305,  0.07773337],\n","         [ 0.11831024, -0.19800855,  0.54490316, ...,  0.44688994,\n","           0.03515597, -0.00575384],\n","         [ 0.2778681 , -0.12389164,  0.58226997, ...,  0.8160166 ,\n","          -0.31722373, -0.11058806]],\n"," \n","        [[ 0.12026028,  0.08024394, -0.06368685, ...,  0.05906743,\n","           0.05528858,  0.00996656],\n","         [ 1.2274351 ,  1.0915016 ,  1.3305295 , ...,  0.01417059,\n","          -0.46580198, -0.40935087],\n","         [-0.13852993,  1.7085278 , -0.50078   , ..., -0.640673  ,\n","           0.55650294, -0.16831815],\n","         ...,\n","         [ 0.07414288, -0.27148658,  0.8294463 , ...,  0.46086916,\n","          -0.40626168,  0.04389754],\n","         [-0.03695101, -0.30471078,  0.6816159 , ...,  0.48533916,\n","          -0.32239905, -0.06122478],\n","         [ 0.10908182, -0.20208852,  0.72134733, ...,  0.8141285 ,\n","          -0.64282125, -0.13585275]],\n"," \n","        [[ 0.18903585,  0.02752551, -0.06513745, ..., -0.00620203,\n","           0.15053892,  0.0316545 ],\n","         [ 0.5916147 ,  0.7589138 , -0.07240658, ...,  0.61903954,\n","           0.8292891 ,  0.16161972],\n","         [ 1.4460826 ,  0.44602674,  0.40990272, ...,  0.48255897,\n","           0.6269117 ,  0.1346341 ],\n","         ...,\n","         [ 0.15147905, -0.21573839,  0.70329064, ..., -0.12537238,\n","          -0.13787256,  0.27722067],\n","         [ 0.051438  , -0.24052702,  0.5356912 , ..., -0.0791503 ,\n","          -0.03307908,  0.17380923],\n","         [ 0.20934716, -0.15645276,  0.60395455, ...,  0.3290351 ,\n","          -0.3582717 ,  0.0810039 ]]], dtype=float32)>,\n"," <tf.Tensor: shape=(3, 128, 768), dtype=float32, numpy=\n"," array([[[ 0.12698776, -0.11344831, -0.18614322, ...,  0.11292616,\n","           0.11046886,  0.02836954],\n","         [ 0.01953632, -0.48744708,  0.62193173, ...,  0.7575652 ,\n","           1.3575019 , -1.7733314 ],\n","         [-0.37758565,  0.63051176, -0.7014949 , ...,  0.5206508 ,\n","           0.5375034 , -0.3894166 ],\n","         ...,\n","         [ 0.10996056, -0.25087598,  0.6294284 , ...,  0.8492589 ,\n","          -0.3694975 , -0.07815899],\n","         [ 0.0580402 , -0.19659618,  0.61297417, ...,  0.87435734,\n","          -0.32206422, -0.1059302 ],\n","         [ 0.20933765, -0.21972156,  0.5998175 , ...,  1.078235  ,\n","          -0.45382762, -0.20469664]],\n"," \n","        [[-0.01457329, -0.18678744, -0.18062344, ...,  0.13158119,\n","           0.14435026,  0.02050305],\n","         [ 1.0226789 ,  1.6594087 ,  1.9533287 , ..., -0.0679467 ,\n","          -0.3916005 , -0.52609605],\n","         [ 0.2969274 ,  1.8275307 , -0.4425718 , ..., -0.3418499 ,\n","           1.2139821 , -0.42413682],\n","         ...,\n","         [-0.1458157 , -0.17842299,  0.86444247, ...,  0.9343762 ,\n","          -0.42796874, -0.12779012],\n","         [-0.20654798, -0.27147233,  0.7899692 , ...,  0.9070698 ,\n","          -0.3883739 , -0.17912087],\n","         [-0.11251442, -0.14433211,  0.7839875 , ...,  1.0872583 ,\n","          -0.4685037 , -0.25143474]],\n"," \n","        [[ 0.08973332, -0.184197  , -0.16645093, ...,  0.02761342,\n","           0.11187734,  0.08041727],\n","         [ 0.58311343,  0.59570277,  0.36019543, ...,  0.41270077,\n","           0.2680917 ,  0.28400552],\n","         [ 2.1166677 ,  0.5176941 ,  0.8637748 , ...,  0.71787316,\n","           0.32405078,  0.09739965],\n","         ...,\n","         [ 0.24372923, -0.05775537,  0.68428767, ...,  0.4348358 ,\n","          -0.5766094 , -0.11131077],\n","         [ 0.16803887, -0.03091843,  0.5863844 , ...,  0.4962581 ,\n","          -0.5056794 , -0.2078219 ],\n","         [ 0.24831752,  0.00315461,  0.51592517, ...,  0.80502367,\n","          -0.6989964 , -0.24186437]]], dtype=float32)>,\n"," <tf.Tensor: shape=(3, 128, 768), dtype=float32, numpy=\n"," array([[[ 0.05066103, -0.18493819, -0.08986218, ...,  0.17119211,\n","           0.10062329,  0.18139645],\n","         [-0.11753212, -0.45797274,  1.0413234 , ...,  1.3981094 ,\n","           1.2416157 , -2.073118  ],\n","         [-0.5014272 ,  0.7208636 , -0.49685004, ...,  0.55492926,\n","           0.5901921 , -0.37879032],\n","         ...,\n","         [-0.09127004, -0.13216555,  0.7841772 , ...,  0.8799229 ,\n","           0.01143264, -0.2055957 ],\n","         [-0.21015252, -0.09506647,  0.72338885, ...,  0.88314676,\n","           0.04705408, -0.19448641],\n","         [-0.04897378, -0.18200669,  0.79560655, ...,  1.0637885 ,\n","          -0.08109847, -0.27638417]],\n"," \n","        [[-0.06701259, -0.2606517 , -0.04331836, ...,  0.3091061 ,\n","           0.0977668 ,  0.15299638],\n","         [ 1.094522  ,  1.3536124 ,  1.7978534 , ...,  0.12543261,\n","          -0.5248913 , -0.44357932],\n","         [ 0.51467806,  1.915976  , -0.25294018, ..., -0.07624097,\n","           0.9429417 , -0.44981474],\n","         ...,\n","         [-0.1423741 , -0.1327475 ,  0.95186955, ...,  1.1124136 ,\n","          -0.05877234, -0.25367007],\n","         [-0.2623057 , -0.25567615,  0.85788184, ...,  1.0961692 ,\n","          -0.09332795, -0.2723873 ],\n","         [-0.19657585, -0.17628908,  0.97972393, ...,  1.1947649 ,\n","          -0.12014823, -0.3997862 ]],\n"," \n","        [[ 0.10617068, -0.27990752, -0.017318  , ...,  0.20060441,\n","           0.08148395,  0.21859078],\n","         [ 0.68925875,  0.3159155 ,  0.5558665 , ...,  0.69039506,\n","          -0.07141594,  0.4140721 ],\n","         [ 2.5758889 ,  0.6252092 ,  1.2503715 , ...,  0.43957725,\n","          -0.18525645, -0.0500485 ],\n","         ...,\n","         [ 0.20464353, -0.01561971,  0.8343146 , ...,  0.8014957 ,\n","          -0.12853873, -0.3584206 ],\n","         [-0.02875618,  0.05097781,  0.6815926 , ...,  0.9003145 ,\n","          -0.12434848, -0.42256358],\n","         [ 0.13327712,  0.02257282,  0.7722172 , ...,  1.0211186 ,\n","          -0.30834734, -0.45623207]]], dtype=float32)>,\n"," <tf.Tensor: shape=(3, 128, 768), dtype=float32, numpy=\n"," array([[[ 3.7380055e-02, -4.2215258e-01, -7.3533571e-01, ...,\n","           2.5745869e-01, -2.7814753e-02,  6.5813291e-01],\n","         [ 3.0251959e-01, -5.7937515e-01,  5.3424215e-01, ...,\n","           1.3324547e+00,  9.9238223e-01, -1.5780956e+00],\n","         [-4.0786661e-02,  6.5179163e-01, -5.3595799e-01, ...,\n","           7.2380501e-01,  4.6614683e-01, -3.6215726e-01],\n","         ...,\n","         [-1.3423914e-01, -4.8984021e-01,  8.3948171e-01, ...,\n","           1.0041709e+00, -4.3999973e-01, -4.6607748e-02],\n","         [-2.3451820e-01, -4.7876683e-01,  6.7999470e-01, ...,\n","           8.1313515e-01, -3.8875306e-01, -3.0474590e-02],\n","         [ 5.4784462e-02, -6.4270377e-01,  6.4477485e-01, ...,\n","           9.5848960e-01, -4.8239893e-01, -1.7422622e-02]],\n"," \n","        [[-2.3789257e-03, -4.3996555e-01, -4.5220438e-01, ...,\n","           1.8866606e-01,  2.9210610e-02,  5.9727705e-01],\n","         [ 1.0245473e+00,  1.4122343e+00,  1.9643888e+00, ...,\n","          -1.1231907e-01, -3.6186835e-01,  8.1920549e-02],\n","         [ 7.2923481e-01,  1.4029282e+00, -7.7625418e-01, ...,\n","          -8.6850688e-02,  5.9770614e-01, -7.3992014e-01],\n","         ...,\n","         [-2.3190163e-01, -5.3114593e-01,  1.0220623e+00, ...,\n","           6.9389963e-01, -5.8424634e-01, -1.3336064e-01],\n","         [-4.1710690e-01, -7.2937566e-01,  7.9224437e-01, ...,\n","           6.7786324e-01, -6.2675440e-01, -1.2734762e-01],\n","         [-3.9330968e-01, -6.8669963e-01,  8.8831431e-01, ...,\n","           8.6380577e-01, -5.7840192e-01, -2.7425122e-01]],\n"," \n","        [[ 1.5151398e-01, -7.0752299e-01, -2.7520427e-01, ...,\n","           4.4345918e-01, -2.0920381e-01,  4.9860150e-01],\n","         [ 8.8647920e-01, -2.4838145e-01,  7.3537517e-01, ...,\n","           7.4179423e-01, -1.3177191e-01,  1.0158527e-01],\n","         [ 2.5865817e+00,  6.1882865e-01,  5.2798849e-01, ...,\n","           8.4873104e-01, -5.9150201e-01,  2.3499079e-02],\n","         ...,\n","         [-5.5268593e-02, -4.3394673e-01,  1.1783335e+00, ...,\n","           9.1791630e-01, -4.5718139e-01, -2.5014642e-01],\n","         [-2.9328665e-01, -2.3091280e-01,  9.9380094e-01, ...,\n","           1.0353788e+00, -4.2435685e-01, -3.4947640e-01],\n","         [-1.5899098e-01, -5.0098199e-01,  9.8142135e-01, ...,\n","           1.1373075e+00, -6.1888403e-01, -4.4457781e-01]]], dtype=float32)>,\n"," <tf.Tensor: shape=(3, 128, 768), dtype=float32, numpy=\n"," array([[[-0.44786447, -0.34947062, -0.7882238 , ..., -0.05816967,\n","           0.29419068,  0.7608746 ],\n","         [-0.03381123, -0.5131373 ,  0.74798626, ...,  0.352184  ,\n","           1.1626318 , -1.6000981 ],\n","         [-0.2593609 ,  0.69302374,  0.19141634, ..., -0.13068412,\n","           0.8364638 , -0.2471593 ],\n","         ...,\n","         [-0.10129297, -0.21203226,  0.7149335 , ...,  0.37109178,\n","          -0.13544586, -0.27931708],\n","         [-0.1616854 , -0.23677151,  0.5038793 , ...,  0.08221123,\n","          -0.13441423, -0.15877284],\n","         [ 0.11218882, -0.50638705,  0.55968636, ...,  0.38492295,\n","          -0.24477173, -0.19089234]],\n"," \n","        [[-0.22162372, -0.19621077, -0.28344575, ..., -0.31443986,\n","           0.10705049,  0.4796565 ],\n","         [ 1.1641945 ,  1.4096841 ,  1.8369291 , ..., -0.09245819,\n","          -0.1805329 ,  0.00527203],\n","         [ 1.0331438 ,  1.4353484 , -0.3169004 , ..., -0.01052115,\n","           0.19397072, -0.89486843],\n","         ...,\n","         [-0.03026133, -0.09110166,  1.2526094 , ...,  0.4193253 ,\n","           0.03654208, -0.5057594 ],\n","         [-0.24822515, -0.20058122,  1.0711654 , ...,  0.4599416 ,\n","          -0.05807006, -0.49464422],\n","         [-0.48412699, -0.01470901,  1.2811811 , ...,  0.8253523 ,\n","           0.00726626, -0.67591786]],\n"," \n","        [[-0.2160814 , -0.8986421 , -0.44991505, ..., -0.0828622 ,\n","          -0.17226863,  0.6619985 ],\n","         [ 0.66614485, -0.54916877,  0.4646058 , ...,  0.17649387,\n","           0.22822551,  0.34962228],\n","         [ 2.0629625 ,  0.6991985 ,  0.35604492, ...,  0.52953345,\n","          -0.3480932 ,  0.00831368],\n","         ...,\n","         [-0.11594017, -0.17149235,  0.89943993, ...,  0.62990135,\n","          -0.3399021 , -0.2004921 ],\n","         [-0.1300757 , -0.02739053,  0.70799804, ...,  0.805946  ,\n","          -0.30724174, -0.19956349],\n","         [-0.26314875, -0.26137108,  0.6338569 , ...,  0.81501836,\n","          -0.45400348, -0.35120648]]], dtype=float32)>,\n"," <tf.Tensor: shape=(3, 128, 768), dtype=float32, numpy=\n"," array([[[-0.47360855, -0.40398902, -0.68251336, ...,  0.03788575,\n","           0.29342276,  0.47161007],\n","         [ 0.03882642, -0.5334177 ,  0.9052909 , ...,  0.1905587 ,\n","           0.98008746, -1.6581945 ],\n","         [-0.5698827 ,  0.45800063,  0.5029643 , ..., -0.60363275,\n","           0.73304176, -0.779341  ],\n","         ...,\n","         [-0.14293092, -0.10497541,  0.72360474, ...,  0.46286958,\n","          -0.14714772, -0.01546034],\n","         [-0.1327048 , -0.07865306,  0.50388485, ...,  0.17906374,\n","          -0.08648773,  0.05066068],\n","         [ 0.01322674, -0.48292717,  0.70185596, ...,  0.30658036,\n","          -0.13560648,  0.04808314]],\n"," \n","        [[ 0.12308347, -0.30817065, -0.16474594, ..., -0.28295568,\n","           0.18127987,  0.4491446 ],\n","         [ 1.6363742 ,  0.77205074,  1.8368226 , ..., -0.0055663 ,\n","          -0.88818395, -0.08094059],\n","         [ 1.0422517 ,  1.3991148 , -0.378     , ..., -0.07180483,\n","           0.07745212, -1.2104182 ],\n","         ...,\n","         [-0.0891728 ,  0.19331881,  1.4068458 , ...,  0.44367367,\n","          -0.14664933, -0.52950245],\n","         [-0.30028078, -0.01942854,  1.263934  , ...,  0.30237916,\n","          -0.19507103, -0.3975892 ],\n","         [-0.60468245,  0.09270955,  1.3508204 , ...,  0.59363395,\n","          -0.16556607, -0.5302642 ]],\n"," \n","        [[-0.27334678, -0.952685  , -0.7869656 , ..., -0.12205333,\n","          -0.08783776,  0.75811654],\n","         [ 0.46756968, -0.16237502, -0.01155889, ...,  0.1878123 ,\n","           0.6216473 ,  0.03009939],\n","         [ 1.7947402 ,  0.90510744,  0.08580865, ...,  0.77093554,\n","          -0.6682792 , -0.06755488],\n","         ...,\n","         [-0.18337473, -0.1580655 ,  1.1826948 , ...,  0.83047515,\n","          -0.3940643 , -0.23047724],\n","         [-0.22270253,  0.00975994,  0.9340851 , ...,  1.1286676 ,\n","          -0.34884378, -0.19491449],\n","         [-0.30386135, -0.29683143,  0.8247166 , ...,  1.009081  ,\n","          -0.4640763 , -0.31465626]]], dtype=float32)>,\n"," <tf.Tensor: shape=(3, 128, 768), dtype=float32, numpy=\n"," array([[[-0.22244814, -0.55440867, -0.73858976, ...,  0.14570436,\n","           0.31587845,  0.56562114],\n","         [-0.08157322, -0.8622841 ,  0.9100795 , ..., -0.11564624,\n","           1.3445851 , -1.4691536 ],\n","         [-0.6698113 ,  0.2941606 ,  0.50376415, ..., -0.55992585,\n","           1.1676261 , -1.02674   ],\n","         ...,\n","         [-0.14264682, -0.05739009,  0.4631547 , ...,  0.4288805 ,\n","           0.11766381,  0.13704066],\n","         [-0.10932758, -0.01741255,  0.33433574, ...,  0.23371726,\n","           0.20459947,  0.17056566],\n","         [-0.02254038, -0.4824862 ,  0.54529124, ...,  0.32935956,\n","           0.14645791,  0.15779576]],\n"," \n","        [[-0.02181729, -0.51859486,  0.28063235, ..., -0.33222663,\n","           0.5743635 ,  0.5107957 ],\n","         [ 1.739335  ,  0.7809435 ,  1.6503719 , ...,  0.18434958,\n","          -0.397388  , -0.39410597],\n","         [ 0.8790705 ,  1.0918418 , -0.6896123 , ..., -0.1680036 ,\n","           0.15090342, -1.5661237 ],\n","         ...,\n","         [ 0.00620472,  0.15452623,  1.413664  , ...,  0.62316686,\n","          -0.11626951, -0.22820336],\n","         [-0.12804547, -0.13876006,  1.2752047 , ...,  0.33444473,\n","          -0.08867259, -0.21824424],\n","         [-0.51036686, -0.15611613,  1.2696797 , ...,  0.35569164,\n","          -0.12692502, -0.34144968]],\n"," \n","        [[-0.05967469, -0.8448222 , -0.8939019 , ..., -0.10863975,\n","           0.4093247 ,  0.7940862 ],\n","         [ 0.54405093, -0.3196293 , -0.45491588, ...,  0.4806863 ,\n","           0.7786254 ,  0.22774309],\n","         [ 1.4479868 ,  1.1230612 ,  0.09567924, ...,  1.3554293 ,\n","           0.061435  , -0.00836904],\n","         ...,\n","         [ 0.25652277, -0.14106551,  1.1854346 , ...,  0.9568366 ,\n","          -0.2160394 , -0.06946401],\n","         [ 0.2581904 ,  0.0794919 ,  0.98516536, ...,  1.0518221 ,\n","          -0.07890969, -0.12841478],\n","         [-0.05268877, -0.33431387,  0.96373445, ...,  0.89607006,\n","          -0.10082405, -0.28129643]]], dtype=float32)>,\n"," <tf.Tensor: shape=(3, 128, 768), dtype=float32, numpy=\n"," array([[[-2.3562723e-01, -3.3816037e-01, -7.8183675e-01, ...,\n","          -3.2729387e-01,  1.1139299e-01,  5.3489685e-01],\n","         [ 2.2182582e-01, -4.8626634e-01,  8.4224206e-01, ...,\n","          -5.6579202e-01,  1.1201342e+00, -1.4807571e+00],\n","         [-2.4182683e-01,  2.7192041e-01,  1.3791424e-01, ...,\n","          -5.1557219e-01,  1.1965218e+00, -8.0196089e-01],\n","         ...,\n","         [-1.1493644e-01,  4.2864004e-01,  2.8218636e-01, ...,\n","           2.2813800e-01, -4.2477682e-02,  1.7265322e-02],\n","         [-4.5896932e-02,  4.9368465e-01,  2.4258666e-01, ...,\n","           1.2977251e-01,  1.5921193e-01,  5.2545857e-02],\n","         [ 5.5526443e-02, -9.4035558e-02,  5.2240807e-01, ...,\n","           2.1269563e-01, -7.5653307e-02,  2.2211475e-02]],\n"," \n","        [[-6.0945474e-02, -3.6597347e-01, -2.4967477e-01, ...,\n","          -7.1311033e-01,  2.6247734e-01,  7.1162093e-01],\n","         [ 1.1847737e+00,  3.9557320e-01,  1.3022633e+00, ...,\n","          -2.7846590e-01, -9.1034003e-02, -2.9645741e-02],\n","         [ 5.3758252e-01,  7.4529487e-01, -6.8143082e-01, ...,\n","           5.6367224e-01,  7.0109598e-02, -1.2969300e+00],\n","         ...,\n","         [-2.1170214e-02,  3.4380320e-01,  1.5234286e+00, ...,\n","           6.5188080e-01, -2.3459578e-01, -1.3216943e-01],\n","         [-1.5613264e-01, -5.5715203e-02,  1.5114084e+00, ...,\n","           4.3125328e-01, -7.6097641e-03, -8.2651705e-02],\n","         [-5.4055357e-01, -2.3343647e-01,  1.2401887e+00, ...,\n","           1.5870987e-01, -1.2845695e-01, -2.3363125e-01]],\n"," \n","        [[ 6.1017275e-02, -3.5161692e-01, -8.4891468e-01, ...,\n","          -4.8555002e-01,  4.2703140e-01,  6.3829017e-01],\n","         [ 6.6376501e-01,  1.8273853e-04, -7.9078925e-01, ...,\n","           3.0686998e-01,  7.5843638e-01,  7.3240131e-01],\n","         [ 1.4494702e+00,  1.1265038e+00,  1.7709155e-01, ...,\n","           2.3471609e-01,  3.4929463e-01,  4.3709767e-01],\n","         ...,\n","         [ 3.2339522e-01,  1.7575824e-01,  8.7672383e-01, ...,\n","           9.8904085e-01, -2.7050823e-01, -3.0809480e-01],\n","         [ 4.0404201e-01,  5.1364934e-01,  7.2748131e-01, ...,\n","           9.4942117e-01, -1.0216013e-02, -3.4644282e-01],\n","         [-9.1300467e-03, -8.7016746e-02,  7.3031849e-01, ...,\n","           8.5439730e-01, -1.3661243e-01, -4.7493571e-01]]], dtype=float32)>,\n"," <tf.Tensor: shape=(3, 128, 768), dtype=float32, numpy=\n"," array([[[-0.42045215, -0.01094861, -0.36765975, ..., -0.3733437 ,\n","           0.24380705,  0.16483708],\n","         [ 0.18222073, -0.40629265,  0.33046144, ..., -0.67643815,\n","           0.9953258 , -1.4447616 ],\n","         [-0.19236282,  0.3876664 , -0.23744462, ..., -0.94482577,\n","           1.2609878 , -0.9029985 ],\n","         ...,\n","         [ 0.12683316,  0.98631185,  0.02274969, ...,  0.2365622 ,\n","           0.16217235, -0.03219539],\n","         [ 0.17181262,  0.889042  ,  0.17771304, ...,  0.17095312,\n","           0.34674382, -0.10467638],\n","         [ 0.15949869,  0.4058423 ,  0.28117627, ...,  0.2945281 ,\n","           0.17087778, -0.0284305 ]],\n"," \n","        [[-0.17152905, -0.12131789, -0.35670146, ..., -0.39110178,\n","           0.1810121 ,  0.31008914],\n","         [ 0.8799592 ,  0.45336425,  0.98844856, ..., -0.4379567 ,\n","           0.08641484, -0.13177401],\n","         [ 0.2574933 ,  0.63975805, -0.8011753 , ...,  0.2729462 ,\n","          -0.05237905, -1.137102  ],\n","         ...,\n","         [-0.15948847,  0.80942345,  0.7797265 , ...,  0.24551673,\n","          -0.468424  ,  0.36248833],\n","         [-0.39717487,  0.23108426,  1.0418159 , ...,  0.13427864,\n","          -0.25597265, -0.00767034],\n","         [-0.8633849 ,  0.07514013,  0.8005084 , ...,  0.2623524 ,\n","          -0.4980783 , -0.16059564]],\n"," \n","        [[-0.07011148, -0.02392565, -0.61924344, ..., -0.1454205 ,\n","           0.3404939 ,  0.41224745],\n","         [ 0.5926161 ,  0.19015935, -0.3739965 , ...,  0.372396  ,\n","           0.39152846,  0.42580396],\n","         [ 1.1394776 ,  0.8439855 ,  0.38893935, ...,  0.20898308,\n","           0.2517631 ,  0.26399997],\n","         ...,\n","         [ 0.43305945,  0.420121  ,  1.0965105 , ...,  1.1872362 ,\n","          -0.16672093,  0.00856137],\n","         [ 0.5754233 ,  0.8660943 ,  1.1184692 , ...,  1.0475053 ,\n","           0.04264218, -0.01540378],\n","         [-0.0548794 , -0.0730695 ,  0.901221  , ...,  0.8004527 ,\n","          -0.1682066 , -0.3550739 ]]], dtype=float32)>,\n"," <tf.Tensor: shape=(3, 128, 768), dtype=float32, numpy=\n"," array([[[-6.22721732e-01, -3.40524837e-02, -3.37383777e-01, ...,\n","          -2.86062658e-01, -9.03991833e-02, -1.64669827e-02],\n","         [ 2.29576617e-01, -8.25543821e-01,  6.08362138e-01, ...,\n","          -1.02465308e+00,  5.18253982e-01, -1.85922277e+00],\n","         [-1.79721758e-01, -1.18324876e-01, -4.37287629e-01, ...,\n","          -7.49740601e-01,  8.54726076e-01, -6.74693882e-01],\n","         ...,\n","         [ 5.28582558e-02,  1.06693852e+00,  5.21294028e-02, ...,\n","           1.31911129e-01,  3.21557909e-01,  6.16961680e-02],\n","         [ 7.88449124e-02,  8.39763999e-01,  1.89603254e-01, ...,\n","           2.87196226e-02,  4.23531860e-01,  7.72977248e-04],\n","         [ 6.13052249e-02,  4.30266201e-01,  2.78072715e-01, ...,\n","           1.38653278e-01,  2.87332118e-01,  4.87764180e-02]],\n"," \n","        [[-2.64922053e-01, -3.20315920e-03, -7.79197067e-02, ...,\n","          -3.95058990e-01, -4.10066634e-01,  2.94166446e-01],\n","         [ 9.11932111e-01,  6.35910869e-01,  4.52636302e-01, ...,\n","          -2.17690632e-01, -6.30946606e-02, -1.99060902e-01],\n","         [-4.66108732e-02,  5.46889007e-01, -7.76736617e-01, ...,\n","           4.70761120e-01,  3.79115045e-02, -9.69244301e-01],\n","         ...,\n","         [ 1.33308306e-01,  1.08476567e+00,  7.87212729e-01, ...,\n","          -8.74747783e-02, -7.00671911e-01,  3.46760571e-01],\n","         [-9.74712148e-02,  2.65156060e-01,  1.11038816e+00, ...,\n","          -2.07802281e-03, -6.53659523e-01, -2.48701815e-02],\n","         [-7.69065917e-01, -2.86026113e-02,  1.07022941e+00, ...,\n","           5.41324973e-01, -7.25453913e-01, -2.45262071e-01]],\n"," \n","        [[-2.15350598e-01, -2.39622340e-01, -3.09324086e-01, ...,\n","          -2.59650201e-01,  9.69522744e-02,  4.18266922e-01],\n","         [ 5.07006228e-01, -1.54487044e-02, -1.05197214e-01, ...,\n","           3.86752963e-01,  2.20411137e-01, -1.02932774e-01],\n","         [ 1.03660500e+00,  9.17130828e-01,  2.61640787e-01, ...,\n","           3.31821471e-01,  4.55969870e-01,  1.26978636e-01],\n","         ...,\n","         [ 1.61905214e-01,  7.62700617e-01,  1.27376735e+00, ...,\n","           5.72599649e-01, -5.92952743e-02,  2.62240261e-01],\n","         [ 4.61245179e-01,  1.16738713e+00,  9.59477365e-01, ...,\n","           4.60329294e-01,  1.35212436e-01,  4.51360136e-01],\n","         [-2.41840601e-01,  1.73527092e-01,  8.41564178e-01, ...,\n","           2.47668296e-01, -1.48102880e-01,  6.55740574e-02]]],\n","       dtype=float32)>,\n"," <tf.Tensor: shape=(3, 128, 768), dtype=float32, numpy=\n"," array([[[-2.12194294e-01,  1.48251265e-01, -4.17425662e-01, ...,\n","          -4.71539497e-01, -5.12600541e-01, -1.39757738e-01],\n","         [ 5.16072571e-01, -5.75946450e-01,  2.30451286e-01, ...,\n","          -8.72965097e-01,  1.79074585e-01, -1.36917841e+00],\n","         [ 2.84775291e-02,  4.82946664e-01, -9.87118065e-01, ...,\n","          -4.38941419e-01,  3.76401663e-01, -1.60115212e-01],\n","         ...,\n","         [ 5.34133241e-03,  5.54808497e-01,  1.57400176e-01, ...,\n","          -1.46323666e-01, -3.79703909e-01, -1.94167078e-01],\n","         [ 7.67978653e-03,  3.54641318e-01,  8.37822556e-02, ...,\n","          -2.32333332e-01, -3.28625739e-01, -2.43586689e-01],\n","         [-3.62743065e-02,  2.20459066e-02,  1.37372717e-01, ...,\n","          -2.15766162e-01, -5.18805742e-01, -2.01926962e-01]],\n"," \n","        [[ 3.97817604e-02,  1.80692464e-01, -1.12787835e-01, ...,\n","          -4.08415139e-01, -2.25054905e-01,  2.14681014e-01],\n","         [ 9.90967095e-01,  5.97558022e-01,  1.07362039e-01, ...,\n","          -6.09196126e-01, -2.85248488e-01, -1.70512334e-01],\n","         [ 9.32039097e-02,  4.31378305e-01, -7.69824088e-01, ...,\n","           1.97874442e-01,  2.97592208e-02, -5.12892604e-01],\n","         ...,\n","         [ 4.71809179e-01,  1.04905498e+00,  9.39360678e-01, ...,\n","          -4.73603606e-01, -6.48613095e-01,  5.64325273e-01],\n","         [ 3.12592953e-01,  3.27029079e-01,  1.08464241e+00, ...,\n","          -1.46355674e-01, -6.13252461e-01,  9.08218846e-02],\n","         [-1.97417676e-01, -1.10246070e-01,  9.38867390e-01, ...,\n","           5.62716961e-01, -4.62398559e-01, -3.72625202e-01]],\n"," \n","        [[ 1.43630117e-01,  1.69801444e-01,  4.51200828e-02, ...,\n","          -6.21681735e-02, -1.57533549e-02,  2.87869871e-01],\n","         [ 5.84760427e-01,  2.69932508e-01, -2.85207629e-01, ...,\n","           3.38930815e-01,  1.17772937e-01,  3.69864702e-02],\n","         [ 1.25257826e+00,  1.25564384e+00,  3.87542784e-01, ...,\n","           1.72757924e-01,  4.96661127e-01,  6.13780558e-01],\n","         ...,\n","         [ 1.95485547e-01,  4.40819025e-01,  1.03893638e+00, ...,\n","           1.45270213e-01, -2.77439475e-01,  1.90321162e-01],\n","         [ 4.48165208e-01,  7.64477432e-01,  6.98005140e-01, ...,\n","          -8.36658292e-04, -7.96454325e-02,  4.93358076e-01],\n","         [-2.33981490e-01, -2.03336239e-01,  3.48247260e-01, ...,\n","          -6.43426329e-02, -3.20876300e-01,  2.23339442e-02]]],\n","       dtype=float32)>,\n"," <tf.Tensor: shape=(3, 128, 768), dtype=float32, numpy=\n"," array([[[-9.91162434e-02,  1.97741598e-01, -1.56686112e-01, ...,\n","          -5.39494991e-01,  6.23487085e-02,  4.33820754e-01],\n","         [ 6.72902346e-01, -1.97734565e-01,  1.51384249e-01, ...,\n","          -3.14324439e-01,  2.90869504e-01, -1.33093572e+00],\n","         [ 5.72599806e-02,  5.89669906e-02, -8.07025671e-01, ...,\n","          -4.51571643e-01, -5.30762747e-02, -3.43585819e-01],\n","         ...,\n","         [ 2.70203054e-01,  3.98434605e-03,  1.19567320e-01, ...,\n","          -1.68232217e-01, -1.03130803e-01, -7.57836178e-02],\n","         [ 2.12260127e-01, -1.04961805e-01,  9.88837034e-02, ...,\n","          -2.47035652e-01, -1.67444944e-01, -4.86299731e-02],\n","         [ 2.46769965e-01, -1.86499223e-01,  9.27193388e-02, ...,\n","          -2.14074224e-01, -2.18388200e-01, -7.24780485e-02]],\n"," \n","        [[ 1.05642229e-01,  1.18721649e-01,  1.54568255e-02, ...,\n","          -8.69582668e-02,  3.21217366e-02,  2.10400715e-01],\n","         [ 4.22303766e-01,  1.44624531e-01,  2.30848119e-01, ...,\n","          -1.19805992e-01,  1.11773759e-02,  3.52073126e-02],\n","         [-2.87196562e-02,  6.80985630e-01, -6.52332664e-01, ...,\n","           6.41112179e-02,  7.65194893e-02, -6.09452009e-01],\n","         ...,\n","         [ 9.92666334e-02,  2.89122075e-01,  3.93177330e-01, ...,\n","           1.46529283e-02, -5.63175008e-02,  2.39505142e-01],\n","         [ 6.09341636e-02,  9.72928852e-02,  4.10005420e-01, ...,\n","           1.61932319e-01, -6.29336387e-02,  9.36478153e-02],\n","         [-5.29950522e-02, -1.90365285e-01,  4.28102911e-01, ...,\n","           5.14374733e-01,  7.94790685e-05, -4.80981246e-02]],\n"," \n","        [[-7.90058970e-02,  3.63350958e-01, -2.11015955e-01, ...,\n","          -1.71837613e-01,  1.62997141e-01,  6.72426820e-01],\n","         [ 2.78835475e-01,  4.37162966e-01, -3.57648224e-01, ...,\n","          -4.46365401e-02,  3.83151829e-01,  5.88798106e-01],\n","         [ 1.20376706e+00,  1.07270157e+00,  4.84086633e-01, ...,\n","           2.49210477e-01,  4.07308996e-01,  4.04817551e-01],\n","         ...,\n","         [ 8.63000005e-02,  1.93538323e-01,  4.75400031e-01, ...,\n","           1.88801870e-01, -6.47414327e-02,  3.13185751e-01],\n","         [ 1.58870488e-01,  2.85726666e-01,  3.73407781e-01, ...,\n","           9.30911154e-02, -4.96959612e-02,  3.87611032e-01],\n","         [-8.07989389e-02, -9.57285315e-02,  2.68097728e-01, ...,\n","           1.39796078e-01, -6.31587803e-02,  2.72883236e-01]]],\n","       dtype=float32)>]"]},"metadata":{},"execution_count":12}]},{"cell_type":"code","source":[],"metadata":{"id":"KoLrwc8OJLDF"},"execution_count":null,"outputs":[]}],"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyNepTQwTZOAtBI7dDBxQq1x"},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}